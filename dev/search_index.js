var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = QuantumStateBase","category":"page"},{"location":"#QuantumStateBase","page":"Home","title":"QuantumStateBase","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for QuantumStateBase.","category":"page"},{"location":"#Index","page":"Home","title":"Index","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#APIs","page":"Home","title":"APIs","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Modules = [QuantumStateBase]","category":"page"},{"location":"#QuantumStateBase.ComplexVec","page":"Home","title":"QuantumStateBase.ComplexVec","text":"ComplexVec{T <: Real}(r::T, θ::T)\n\nVector in polar coordinate for complex plane.\n\nv = r e^-itheta\n\n\n\n\n\n","category":"type"},{"location":"#QuantumStateBase.StateMatrix","page":"Home","title":"QuantumStateBase.StateMatrix","text":"StateMatrix{T <: Number} <: AbstractState\n\nDensity Matrix representation for pure and mixed quantum state. There are various constructures to construct different pure and mixed quantum states.\n\n\n\n\n\n","category":"type"},{"location":"#QuantumStateBase.StateMatrix-Union{Tuple{StateVector{T}}, Tuple{T}} where T<:Number","page":"Home","title":"QuantumStateBase.StateMatrix","text":"StateMatrix(state::StateVector{<:Number})\n\nConvert a StateVector to a StateMatrix.\n\nExamples\n\njulia> state = VacuumState();\n\njulia> StateMatrix(state);\n\n\n\n\n\n","category":"method"},{"location":"#QuantumStateBase.StateVector","page":"Home","title":"QuantumStateBase.StateVector","text":"StateVector{T <: Number} <: AbstractState\n\nVector representation for pure quantum state. There are various constructures to construct different pure quantum states.\n\n\n\n\n\n","category":"type"},{"location":"#QuantumStateBase.WignerFunction-Tuple{AbstractRange, AbstractRange}","page":"Home","title":"QuantumStateBase.WignerFunction","text":"WignerFunction(x_range::AbstractRange, p_range::AbstractRange; dim=DIM)\n\nDeclare a generalized Wigner function with x range and p range\n\nx_range: range of position.\np_range: range of momentum.\ndim: Maximum photon number for truncate, default is 70.\n\nExamples\n\njulia> state = VacuumState();\n\njulia> wf = WignerFunction(-10:0.1:10, -10:0.1:10);\n\njulia> w = wf(state);\n\n\n\n\n\n","category":"method"},{"location":"#Base.copy-Union{Tuple{StateMatrix{T}}, Tuple{T}} where T<:Number","page":"Home","title":"Base.copy","text":"Base.copy(state::StateMatrix{<:Number})\n\nReturn a new instance of a StateMatrix\n\nExamples\n\njulia> state = VacuumState(rep=StateMatrix);\n\njulia> new_state = copy(state);\n\n\n\n\n\n","category":"method"},{"location":"#Base.copy-Union{Tuple{StateVector{T}}, Tuple{T}} where T<:Number","page":"Home","title":"Base.copy","text":"Base.copy(state::StateVector{<:Number})\n\nReturn a new instance of a StateVector\n\nExamples\n\njulia> state = VacuumState();\n\njulia> new_state = copy(state);\n\n\n\n\n\n","category":"method"},{"location":"#Base.vec-Tuple{StateVector{var\"#s4\"} where var\"#s4\"<:Number}","page":"Home","title":"Base.vec","text":"Base.vec(state::StateVector{<:Number})\n\nTo get the vector of a pure quantum state.\n\nExamples\n\njulia> state = FockState(1);\n\njulia> vec(state)\n70-element Vector{ComplexF64}:\n 0.0 + 0.0im\n 1.0 + 0.0im\n     ⋮\n 0.0 + 0.0im\n\n\n\n\n\n","category":"method"},{"location":"#QuantumStateBase.Annihilation-Tuple{}","page":"Home","title":"QuantumStateBase.Annihilation","text":"Annihilation(; dim=DIM)\n\nAnnihilation operator in matrix representation\n\nhata\n\n\n\n\n\n","category":"method"},{"location":"#QuantumStateBase.CoherentState-Tuple{ComplexVec{var\"#s4\"} where var\"#s4\"<:Real}","page":"Home","title":"QuantumStateBase.CoherentState","text":"CoherentState(α::ComplexVec{<:Real}; dim=DIM, rep=StateVector)\n\nCoherent state is defined as the eigenstate of annihilation operator.\n\nα: Eigenvalue of annihilation operator.\ndim: Maximum photon number for truncate, default is 70.\nrep: In which representation, default is StateVector.\n\nhata  alpha rangle = alpha  alpha rangle\n\nThis constructor will construct  alpha rangle = hatD(alpha)  0 rangle\n\n\n\n\n\n","category":"method"},{"location":"#QuantumStateBase.Creation-Tuple{}","page":"Home","title":"QuantumStateBase.Creation","text":"Creation(; dim=DIM)\n\nCreation operator in matrix representation\n\nhata^dagger\n\n\n\n\n\n","category":"method"},{"location":"#QuantumStateBase.Displacement-Tuple{ComplexVec{var\"#s9\"} where var\"#s9\"<:Real}","page":"Home","title":"QuantumStateBase.Displacement","text":"Displacement(α::ComplexVec{<:Real}; dim=DIM)\n\nDisplacement operator in matrix representation\n\nhatD(alpha) = exp(alpha hata^dagger - alpha^* hata)\n\n\n\n\n\n","category":"method"},{"location":"#QuantumStateBase.FockState-Tuple{Any}","page":"Home","title":"QuantumStateBase.FockState","text":"FockState(n; T=ComplexF64, dim=DIM, rep=StateVector)\n\nConstruct a Fock state in rep representation.\n\nn: Photon number of Fock state.\nT: Numeric data types, default is ComplexF64\ndim: Maximum photon number for truncate, default is 70\nrep: In which representation, default is StateVector.\n\nExamples\n\njulia> state = FockState(1);\n\njulia> state = FockState(1, dim=100);\n\njulia> state = FockState(1, rep=StateMatrix);\n\n\n\n\n\n","category":"method"},{"location":"#QuantumStateBase.NumberState-Tuple{Any}","page":"Home","title":"QuantumStateBase.NumberState","text":"NumberState(n; T=ComplexF64, dim=DIM, rep=StateVector)\n\nExactly the same with FockState.\n\n\n\n\n\n","category":"method"},{"location":"#QuantumStateBase.SinglePhotonState-Tuple{}","page":"Home","title":"QuantumStateBase.SinglePhotonState","text":"SinglePhotonState(; T=ComplexF64, dim=DIM, rep=StateVector)\n\nConstruct a single photon state in rep representation.\n\nT: Numeric data types, default is ComplexF64\ndim: Maximum photon number for truncate, default is 70\nrep: In which representation, default is StateVector.\n\nExamples\n\njulia> state = SinglePhotonState();\n\njulia> state = SinglePhotonState(dim=100);\n\njulia> state = SinglePhotonState(rep=StateMatrix);\n\n\n\n\n\n","category":"method"},{"location":"#QuantumStateBase.SqueezedState-Tuple{ComplexVec{var\"#s6\"} where var\"#s6\"<:Real}","page":"Home","title":"QuantumStateBase.SqueezedState","text":"SqueezedState(ξ::ComplexVec{<:Real}; dim=DIM, rep=StateVector)\n\nSqueezed state is defined if its electric field strength for some phases has a quantum uncertainty smaller than that of a coherent state.\n\nξ: Squeezing factor\ndim: Maximum photon number for truncate, default is 70.\nrep: In which representation, default is StateVector.\n\nThis constructor will construct  xi rangle = hatS(xi)  0 rangle\n\n\n\n\n\n","category":"method"},{"location":"#QuantumStateBase.SqueezedThermalState-Tuple{ComplexVec{var\"#s6\"} where var\"#s6\"<:Real, Real}","page":"Home","title":"QuantumStateBase.SqueezedThermalState","text":"SqueezedThermalState(ξ::ComplexVec{<:Real}, n̄::Real; dim=DIM)\n\nSqueezed state is defined if its electric field strength for some phases has a quantum uncertainty smaller than that of a coherent state.\n\nξ: Squeezing factor\nn̄: Average photon number at temperature T.\ndim: Maximum photon number for truncate, default is 70.\n\nThis constructor will construct rho = hatS(xi) rho_th hatS(xi)^T\n\n\n\n\n\n","category":"method"},{"location":"#QuantumStateBase.Squeezing-Tuple{ComplexVec{var\"#s4\"} where var\"#s4\"<:Real}","page":"Home","title":"QuantumStateBase.Squeezing","text":"Squeezing(ξ::ComplexVec{<:Real}; dim=DIM)\n\nSqueezing operator in matrix representation\n\nhatS(xi) = exp(frac12 (xi^* hata^2 - xi hata^dagger 2))\n\n\n\n\n\n","category":"method"},{"location":"#QuantumStateBase.ThermalState-Tuple{Real}","page":"Home","title":"QuantumStateBase.ThermalState","text":"ThermalState(n̄::Real; dim=DIM)\n\nThermal state is a mixed state with photon number distribution described by Bose-Einstein distribution.\n\nn̄: Average photon number at temperature T.\ndim: Maximum photon number for truncate, default is 70.\n\n\n\n\n\n","category":"method"},{"location":"#QuantumStateBase.VacuumState-Tuple{}","page":"Home","title":"QuantumStateBase.VacuumState","text":"VacuumState(; T=ComplexF64, dim=DIM, rep=StateVector)\n\nConstruct a vacuum state in rep representation.\n\nT: Numeric data types, default is ComplexF64\ndim: Maximum photon number for truncate, default is 70\nrep: In which representation, default is StateVector.\n\nExamples\n\njulia> state = VacuumState();\n\njulia> state = VacuumState(dim=100);\n\njulia> state = VacuumState(rep=StateMatrix);\n\n\n\n\n\n","category":"method"},{"location":"#QuantumStateBase.annihilate!-Tuple{StateVector{var\"#s6\"} where var\"#s6\"<:Number}","page":"Home","title":"QuantumStateBase.annihilate!","text":"annihilate!(state::AbstractState)\n\nApply annihilation operator on the quantum state.\n\nExamples\n\njulia> state = SinglePhotonState();\n\njulia> annihilate!(state);\n\njulia> vec(state) == vec(VacuumState())\ntrue\n\n\n\n\n\n","category":"method"},{"location":"#QuantumStateBase.annihilate-Tuple{AbstractState}","page":"Home","title":"QuantumStateBase.annihilate","text":"annihilate!(state::AbstractState)\n\nApply annihilation operator on the new instance of the quantum state.\n\nExamples\n\njulia> state = SinglePhotonState();\n\njulia> new_state = annihilate(state);\n\njulia> vec(state) == vec(SinglePhotonState())\ntrue\n\njulia> vec(new_state) == vec(VacuumState())\ntrue\n\n\n\n\n\n","category":"method"},{"location":"#QuantumStateBase.create!-Tuple{StateVector{var\"#s6\"} where var\"#s6\"<:Number}","page":"Home","title":"QuantumStateBase.create!","text":"create!(state::AbstractState)\n\nApply creation operator on the quantum state.\n\nExamples\n\njulia> state = VacuumState();\n\njulia> create!(state);\n\njulia> vec(state) == vec(SinglePhotonState())\ntrue\n\n\n\n\n\n","category":"method"},{"location":"#QuantumStateBase.create-Tuple{AbstractState}","page":"Home","title":"QuantumStateBase.create","text":"create(state::AbstractState)\n\nApply creation operator on the new instance of the quantum state.\n\nExamples\n\njulia> state = VacuumState();\n\njulia> new_state = create(state);\n\njulia> vec(state) == vec(VacuumState())\ntrue\n\njulia> vec(new_state) == vec(SinglePhotonState())\ntrue\n\n\n\n\n\n","category":"method"},{"location":"#QuantumStateBase.displace!-Tuple{StateVector{var\"#s7\"} where var\"#s7\"<:Number, ComplexVec{var\"#s6\"} where var\"#s6\"<:Real}","page":"Home","title":"QuantumStateBase.displace!","text":"displace!(state::AbstractState)\n\nApply displacement operator on the quantum state.\n\nExamples\n\njulia> state = VacuumState();\n\njulia> displace!(state, α(5., π/4));\n\njulia> vec(state) == vec(CoherentState(α(5., π/4)))\ntrue\n\n\n\n\n\n","category":"method"},{"location":"#QuantumStateBase.laguerre-Tuple{Integer, Integer}","page":"Home","title":"QuantumStateBase.laguerre","text":"laguerre(n::Integer, α::Integer)(x::Real)\n\nGeneralized Laguerre polynomials\n\nExamples\n\njulia> L = laguerre(1, 3);\n\njulia> L(5)\n-1\n\n\n\n\n\n","category":"method"},{"location":"#QuantumStateBase.laguerre-Union{Tuple{T}, Tuple{Integer, Integer, T}} where T<:Real","page":"Home","title":"QuantumStateBase.laguerre","text":"laguerre(n::Integer, α::Integer, x::Real)\n\nGeneralized Laguerre polynomials\n\nExamples\n\njulia> laguerre(0, 1, 5)\n1\n\njulia> laguerre(1, 3, 5)\n-1\n\n\n\n\n\n","category":"method"},{"location":"#QuantumStateBase.purity-Tuple{StateMatrix{var\"#s1\"} where var\"#s1\"<:Number}","page":"Home","title":"QuantumStateBase.purity","text":"purity(state::StateMatrix{<:Number})\n\nCalculate purity for quantum state in density matrix representation.\n\nExamples\n\njulia> state = VacuumState(rep=StateMatrix);\n\njulia> purity(state)\n1.0\n\n\n\n\n\n","category":"method"},{"location":"#QuantumStateBase.purity-Tuple{StateVector{var\"#s1\"} where var\"#s1\"<:Number}","page":"Home","title":"QuantumStateBase.purity","text":"purity(state::StateVector{<:Number})\n\nCalculate purity for quantum state in vector representation.\n\nExamples\n\njulia> state = VacuumState();\n\njulia> purity(state)\n1.0\n\n\n\n\n\n","category":"method"},{"location":"#QuantumStateBase.squeeze!-Tuple{StateVector{var\"#s7\"} where var\"#s7\"<:Number, ComplexVec{var\"#s6\"} where var\"#s6\"<:Real}","page":"Home","title":"QuantumStateBase.squeeze!","text":"squeeze!(state::AbstractState)\n\nApply squeezing operator on the quantum state.\n\nExamples\n\njulia> state = VacuumState();\n\njulia> squeeze!(state, α(0.5, π/4));\n\njulia> vec(state) == vec(SqueezedState(ξ(0.5, π/4)))\ntrue\n\n\n\n\n\n","category":"method"},{"location":"#QuantumStateBase.α-Union{Tuple{T}, Tuple{T, T}} where T","page":"Home","title":"QuantumStateBase.α","text":"α(r::Real, θ::Real)\n\nEigenvalue of annihilation operator.\n\nhata  alpha rangle = alpha  alpha rangle\n\nExamples\n\njulia> α(1.5, π/4)\nComplexVec{Float64}(1.5exp(-0.7853981633974483im))\n\n\n\n\n\n","category":"method"},{"location":"#QuantumStateBase.ξ","page":"Home","title":"QuantumStateBase.ξ","text":"ξ(r::Real, θ::Real)\n\nExamples\n\njulia> ξ(1.5, π/4)\nComplexVec{Float64}(1.5exp(-0.7853981633974483im))\n\n\n\n\n\n","category":"function"},{"location":"#QuantumStateBase.𝛒-Tuple{StateMatrix{var\"#s1\"} where var\"#s1\"<:Number}","page":"Home","title":"QuantumStateBase.𝛒","text":"𝛒(state::StateMatrix{<:Number})\n\nTo get the density matrix of a pure quantum state.\n\nExamples\n\njulia> state = FockState(1);\n\njulia> 𝛒(state)\n70×70 Matrix{ComplexF64}:\n 0.0+0.0im  0.0+0.0im  0.0+0.0im  …  0.0+0.0im  0.0+0.0im  0.0+0.0im\n 0.0+0.0im  1.0+0.0im  0.0+0.0im     0.0+0.0im  0.0+0.0im  0.0+0.0im\n    ⋮                             ⋱\n 0.0+0.0im  0.0+0.0im  0.0+0.0im     0.0+0.0im  0.0+0.0im  0.0+0.0im\n\n\n\n\n\n","category":"method"},{"location":"#QuantumStateBase.𝛒-Tuple{StateVector{var\"#s1\"} where var\"#s1\"<:Number}","page":"Home","title":"QuantumStateBase.𝛒","text":"𝛒(state::StateVector{<:Number})\n\nTo get the density matrix of a pure quantum state.\n\nExamples\n\njulia> state = FockState(1);\n\njulia> 𝛒(state)\n70×70 Matrix{ComplexF64}:\n 0.0+0.0im  0.0+0.0im  0.0+0.0im  …  0.0+0.0im  0.0+0.0im  0.0+0.0im\n 0.0+0.0im  1.0+0.0im  0.0+0.0im     0.0+0.0im  0.0+0.0im  0.0+0.0im\n    ⋮                             ⋱\n 0.0+0.0im  0.0+0.0im  0.0+0.0im     0.0+0.0im  0.0+0.0im  0.0+0.0im\n\n\n\n\n\n","category":"method"}]
}
