var documenterSearchIndex = {"docs":
[{"location":"get_started/#Get-started","page":"Get started","title":"Get started","text":"","category":"section"},{"location":"get_started/","page":"Get started","title":"Get started","text":"QuantumStateBase is a library to construct common quantum states for the study of quantum optics.","category":"page"},{"location":"get_started/#Quantum-state","page":"Get started","title":"Quantum state","text":"","category":"section"},{"location":"get_started/#Fock-state","page":"Get started","title":"Fock state","text":"","category":"section"},{"location":"get_started/","page":"Get started","title":"Get started","text":"Fock state or number state is the common basis to construct quantum space. To construct a Fock state, a simple way is to use the constructor:","category":"page"},{"location":"get_started/","page":"Get started","title":"Get started","text":"julia> FockState(1)\nStateVector{ComplexF64}(dim=70, vec=[\n 0.0 + 0.0im\n 1.0 + 0.0im\n     ‚ãÆ\n 0.0 + 0.0im\n 0.0 + 0.0im\n])","category":"page"},{"location":"get_started/","page":"Get started","title":"Get started","text":"julia> NumberState(1)\nStateVector{ComplexF64}(dim=70, vec=[\n 0.0 + 0.0im\n 1.0 + 0.0im\n     ‚ãÆ\n 0.0 + 0.0im\n 0.0 + 0.0im\n])","category":"page"},{"location":"get_started/#Coherent-state","page":"Get started","title":"Coherent state","text":"","category":"section"},{"location":"get_started/","page":"Get started","title":"Get started","text":"In quantum mechanics, coherent state is defined as an eigenstate of annihilation operator.","category":"page"},{"location":"get_started/","page":"Get started","title":"Get started","text":"The simple way to construct a coherent state is to use the pre-defined constructure that provides:","category":"page"},{"location":"get_started/","page":"Get started","title":"Get started","text":" alpha rangle = hatD(alpha)  0 rangle","category":"page"},{"location":"get_started/","page":"Get started","title":"Get started","text":"julia> CoherentState(Œ±(4.5, œÄ/4))\nStateVector{ComplexF64}(dim=70, vec=[\n  4.006529739317876e-5 + 9.659393542585425e-17im\n 0.0001274869956459149 - 0.00012748699564586142im\n                       ‚ãÆ\n -6.121271897928516e-9 - 5.381634533850132e-23im\n -3.288576246443117e-9 + 3.288576246443058e-9im\n])","category":"page"},{"location":"get_started/","page":"Get started","title":"Get started","text":"It is also recommend to use the displace! operator to construct coherent state.","category":"page"},{"location":"get_started/","page":"Get started","title":"Get started","text":"For example:","category":"page"},{"location":"get_started/","page":"Get started","title":"Get started","text":" psi rangle = hatD(alpha)  1 rangle","category":"page"},{"location":"get_started/","page":"Get started","title":"Get started","text":"julia> displace!(FockState(1), Œ±(4.5, œÄ/4))\nStateVector{ComplexF64}(dim=70, vec=[\n -0.00012748699564590476 - 0.00012748699564585426im\n  -0.0007712569748142598 + 4.4892457438879324e-17im\n                         ‚ãÆ\n   -4.558281860401069e-8 - 4.558281860401146e-8im\n   -5.084710321874281e-8 - 4.331617601499496e-22im\n])\n","category":"page"},{"location":"get_started/#Squeezed-state","page":"Get started","title":"Squeezed state","text":"","category":"section"},{"location":"get_started/","page":"Get started","title":"Get started","text":"Squeezed state is defined if its electric field strength for some phases has a quantum uncertainty smaller than that of a coherent state.","category":"page"},{"location":"get_started/","page":"Get started","title":"Get started","text":"The simple way to construct a squeezed state is to use the pre-defined constructure that provides:","category":"page"},{"location":"get_started/","page":"Get started","title":"Get started","text":" xi rangle = hatS(xi)  0 rangle","category":"page"},{"location":"get_started/","page":"Get started","title":"Get started","text":"julia> SqueezedState(Œæ(0.5, œÄ/4))\nStateVector{ComplexF64}(dim=70, vec=[\n     0.9417106158316756 + 3.209844670319301e-18im\n                    0.0 + 0.0im\n                        ‚ãÆ\n 2.0592206061670102e-27 - 1.413495457663538e-12im\n                    0.0 + 0.0im\n])","category":"page"},{"location":"get_started/","page":"Get started","title":"Get started","text":"It is also recommend to use the squeeze! operator to construct coherent state.","category":"page"},{"location":"get_started/","page":"Get started","title":"Get started","text":"For example:","category":"page"},{"location":"get_started/","page":"Get started","title":"Get started","text":" psi rangle = hatS(xi)  1 rangle","category":"page"},{"location":"get_started/","page":"Get started","title":"Get started","text":"julia> squeeze!(SinglePhotonState(), Œæ(0.3, œÄ/8))\nStateVector{ComplexF64}(dim=70, vec=[\n                    0.0 + 0.0im\n     0.9356524786986595 + 8.16994637882625e-19im\n                        ‚ãÆ\n                    0.0 + 0.0im\n 1.1365395531228005e-18 - 1.136539553122705e-18im\n])\n","category":"page"},{"location":"get_started/#Thermal-state","page":"Get started","title":"Thermal state","text":"","category":"section"},{"location":"get_started/","page":"Get started","title":"Get started","text":"Thermal state is a mixed state with photon number distribution described by Bose-Einstein distribution.","category":"page"},{"location":"get_started/","page":"Get started","title":"Get started","text":"julia> ThermalState(0.5)\nStateMatrix{ComplexF64}(dim=70, ùõí=[\n 0.6666666666666666 + 0.0im                 0.0 + 0.0im  ‚Ä¶                    0.0 + 0.0im\n                0.0 + 0.0im  0.2222222222222222 + 0.0im                       0.0 + 0.0im\n                0.0 + 0.0im                 0.0 + 0.0im                       0.0 + 0.0im\n                0.0 + 0.0im                 0.0 + 0.0im                       0.0 + 0.0im\n                0.0 + 0.0im                 0.0 + 0.0im                       0.0 + 0.0im\n                0.0 + 0.0im                 0.0 + 0.0im  ‚Ä¶                    0.0 + 0.0im\n                0.0 + 0.0im                 0.0 + 0.0im                       0.0 + 0.0im\n                0.0 + 0.0im                 0.0 + 0.0im                       0.0 + 0.0im\n                    ‚ãÆ                                    ‚ã±\n                0.0 + 0.0im                 0.0 + 0.0im                       0.0 + 0.0im\n                0.0 + 0.0im                 0.0 + 0.0im                       0.0 + 0.0im\n                0.0 + 0.0im                 0.0 + 0.0im  ‚Ä¶                    0.0 + 0.0im\n                0.0 + 0.0im                 0.0 + 0.0im                       0.0 + 0.0im\n                0.0 + 0.0im                 0.0 + 0.0im                       0.0 + 0.0im\n                0.0 + 0.0im                 0.0 + 0.0im                       0.0 + 0.0im\n                0.0 + 0.0im                 0.0 + 0.0im     7.989915113185906e-34 + 0.0im\n])","category":"page"},{"location":"get_started/#Squeezed-thermal-state","page":"Get started","title":"Squeezed thermal state","text":"","category":"section"},{"location":"get_started/","page":"Get started","title":"Get started","text":"Squeezed thermal state with Œæ = 0.3 exp(-im * œÄ/4) and nÃÑ = 0.5 is equivalent to","category":"page"},{"location":"get_started/","page":"Get started","title":"Get started","text":"squeeze!(ThermalState(0.5), Œæ(0.3, œÄ/4))","category":"page"},{"location":"get_started/","page":"Get started","title":"Get started","text":"julia> SqueezedThermalState(Œæ(0.3, œÄ/4), 0.5)\nStateMatrix{ComplexF64}(dim=70, ùõí=[\n      0.6407801270016841 + 8.058693321522632e-20im  ‚Ä¶                      0.0 + 0.0im\n                     0.0 + 0.0im                        4.9231584203398716e-33 + 8.397842435607661e-21im\n    -0.08375298488546218 + 0.08375298488546218im                           0.0 + 0.0im\n                     0.0 + 0.0im                         -6.19303323049067e-20 - 6.193033230493655e-20im\n  1.4299632738856697e-18 - 0.026814344131536903im                          0.0 + 0.0im\n                     0.0 + 0.0im                    ‚Ä¶    5.067883911008702e-19 - 3.0814879110195774e-33im\n    0.004524627317645765 + 0.004524627317645767im                          0.0 + 0.0im\n                     0.0 + 0.0im                       -1.4496801073658087e-18 + 1.4496801073653357e-18im\n                         ‚ãÆ                          ‚ã±\n                     0.0 + 0.0im                         2.753897349626776e-18 - 2.7538973496267774e-18im\n   4.567447222067013e-20 - 4.640681643033437e-33im                         0.0 + 0.0im\n                     0.0 + 0.0im                    ‚Ä¶    8.787055371266764e-34 + 2.405588755307263e-18im\n  -8.341608280406275e-21 + 8.341608280408356e-21im                         0.0 + 0.0im\n                     0.0 + 0.0im                        -8.741973447257788e-19 - 8.741973447257786e-19im\n -2.5492078509163883e-34 - 3.277032527478944e-21im                         0.0 + 0.0im\n                     0.0 + 0.0im                        1.0347686817817904e-18 + 4.513898307157584e-36im\n])","category":"page"},{"location":"get_started/#Wigner-function","page":"Get started","title":"Wigner function","text":"","category":"section"},{"location":"get_started/","page":"Get started","title":"Get started","text":"Wigner function is introduced by Eugene Winger, who describe quantum state using revised classical probability theory.","category":"page"},{"location":"get_started/","page":"Get started","title":"Get started","text":"The quasi probability distribution is defined as:","category":"page"},{"location":"get_started/","page":"Get started","title":"Get started","text":"W_mn(x p) = frac12pi int_-infty^infty dy  e^-ipyh psi_m^*(x+fracy2) psi_n(x-fracy2)","category":"page"},{"location":"get_started/","page":"Get started","title":"Get started","text":"Owing to the fact that the Moyal function is a generalized Wigner function. We can therefore implies that","category":"page"},{"location":"get_started/","page":"Get started","title":"Get started","text":"W(x p) = sum_m n rho_m n W_m n(x p)","category":"page"},{"location":"get_started/","page":"Get started","title":"Get started","text":"Here, rho is the density matrix of the quantum state, defined as:","category":"page"},{"location":"get_started/","page":"Get started","title":"Get started","text":"rho = sum_m n i  p_i   n rangle langle n  hatrho_i  m rangle langle m ","category":"page"},{"location":"get_started/","page":"Get started","title":"Get started","text":"hatrho_i =  psi_i rangle langle psi_i ","category":"page"},{"location":"get_started/","page":"Get started","title":"Get started","text":"hatrho_i  textis a density operator of pure state","category":"page"},{"location":"get_started/","page":"Get started","title":"Get started","text":"And, W_m n(x p) is the generalized Wigner function","category":"page"},{"location":"get_started/","page":"Get started","title":"Get started","text":"W_m n =  beginarrayrcl\nfrac1pi exp-(x^2 + y^2) (-1)^m  sqrt2^n-m fracmn (x-ip)^n-m L_m^n-m (2x^2 + 2p^2)  n geq m \nfrac1pi exp-(x^2 + y^2) (-1)^n  sqrt2^m-n fracnm (x+ip)^m-n L_n^m-n (2x^2 + 2p^2)  n  m \nendarray","category":"page"},{"location":"get_started/","page":"Get started","title":"Get started","text":"julia> state = SqueezedThermalState(Œæ(0.5, 3œÄ/2), 0.3);\n\njulia> wf = WignerFunction(-10:0.1:10, -10:0.1:10);\n\njulia> w = wf(state);\n\njulia> heatmap(w.x_range, w.p_range,  w.ùê∞_surface')","category":"page"},{"location":"get_started/","page":"Get started","title":"Get started","text":"<img src=\"../assets/squeezed_thermal_heatmap.png\" width=\"50%\"/>","category":"page"},{"location":"get_started/#Quadrature-probability-density-function","page":"Get started","title":"Quadrature probability density function","text":"","category":"section"},{"location":"get_started/","page":"Get started","title":"Get started","text":"Usually, we describe a quantum state using two non-commuting observables X(position) and P(momentum) in phase space. The joint distribution is also known as Wigner function.","category":"page"},{"location":"get_started/","page":"Get started","title":"Get started","text":"In homodyne experiments, we measure the E field of the light using the homodyne detector. The phase of the wave are the eigenvalues of the quadrature operator X_theta where X_theta = 0 = X and X_theta = pi2 = P","category":"page"},{"location":"get_started/","page":"Get started","title":"Get started","text":"julia> Œ∏s = LinRange(0, 2œÄ, 100);\n\njulia> xs = LinRange(-10, 10, 100);\n\njulia> ps = q_pdf(state, Œ∏s, xs);\n\njulia> heatmap(Œ∏s, xs, ps')","category":"page"},{"location":"get_started/","page":"Get started","title":"Get started","text":"<img src=\"../assets/squeezed_thermal_quad.png\" width=\"50%\"/>","category":"page"},{"location":"get_started/#Quantum-state-sampler","page":"Get started","title":"Quantum state sampler","text":"","category":"section"},{"location":"get_started/","page":"Get started","title":"Get started","text":"Here, we can sample points from quadrature probability density function of the quantum state. The sampler is implemented by rejection method.","category":"page"},{"location":"get_started/","page":"Get started","title":"Get started","text":"julia> points = rand(state, 4096);\n\njulia> scatter(points[1, :], points[2, :])","category":"page"},{"location":"get_started/","page":"Get started","title":"Get started","text":"<img src=\"../assets/squeezed_thermal_sampled.png\" width=\"50%\"/>","category":"page"},{"location":"apis/#Index","page":"APIs","title":"Index","text":"","category":"section"},{"location":"apis/","page":"APIs","title":"APIs","text":"","category":"page"},{"location":"apis/#APIs","page":"APIs","title":"APIs","text":"","category":"section"},{"location":"apis/","page":"APIs","title":"APIs","text":"Modules = [QuantumStateBase]","category":"page"},{"location":"apis/#QuantumStateBase.ComplexVec-Union{Tuple{T}, Tuple{T, T}} where T","page":"APIs","title":"QuantumStateBase.ComplexVec","text":"QuantumStateBase.ComplexVec(r::T, Œ∏::T)\n\nConstruct a vector in polar coordinate for complex plane.\n\nv = re^-itheta\n\nArguments\n\nr: Radius of the complex number.\nŒ∏: Argument of the complex number.\n\n\n\n\n\n","category":"method"},{"location":"apis/#QuantumStateBase.WignerFunction","page":"APIs","title":"QuantumStateBase.WignerFunction","text":"WignerFunction\n\nWignerFunction to calculate Wigner function for a quantum state in gevin x and p range.\n\nArguments\n\nx_range: First physical domain range in phase space.\np_range: Second physical domain range in phase space.\ndim: Photon number truncation of the quantum state.\n\nExample\n\njulia> xs = -1:0.1:1; ps = -1:0.1:1; dim=35;\n\njulia> wf = WignerFunction(xs, ps, dim=dim);\n\njulia> wf(VacuumState(Matrix, dim=dim));\n\n\n\n\n\n","category":"type"},{"location":"apis/#QuantumStateBase.Annihilation-Tuple{Any}","page":"APIs","title":"QuantumStateBase.Annihilation","text":"QuantumStateBase.Annihilation(T; dim::Integer)\n\nConstruct an annihilation operator in matrix form.\n\nhata\n\n\n\n\n\n","category":"method"},{"location":"apis/#QuantumStateBase.CoherentState-Tuple{Type{<:Complex}, Any, Any, Any}","page":"APIs","title":"QuantumStateBase.CoherentState","text":"CoherentState([T::Type{<:Complex}], r::Real, Œ∏::Real, [rep::Type]; dim::Integer)\n\nConstruct a coherent state in rep representation.\n\nT: Numerical type. Default as ComplexF64 if not assigned.\nr: The radius in phase space.\nŒ∏: The phase angle in phase space.\nrep:In which representation, default as Vector if not assigned.\ndim: Maximum photon number for truncate.\n\n\n\n\n\n","category":"method"},{"location":"apis/#QuantumStateBase.Creation-Tuple{Any}","page":"APIs","title":"QuantumStateBase.Creation","text":"QuantumStateBase.Creation(T; dim::Integer)\n\nConstruct a creation operator in matrix form.\n\nhata^dagger\n\n\n\n\n\n","category":"method"},{"location":"apis/#QuantumStateBase.Displacement-Tuple{Type{<:Complex}, Real, Real}","page":"APIs","title":"QuantumStateBase.Displacement","text":"QuantumStateBase.Displacement(T::Type{<:Complex}, r::Real, Œ∏::Real; dim::Integer)\n\nConstruct a displacement operator in matrix form.\n\nhatD(alpha) = exp(alpha hata^dagger - alpha^* hata)\n\n\n\n\n\n","category":"method"},{"location":"apis/#QuantumStateBase.FockState-Tuple{Type{<:Number}, Integer, Type{Vector}}","page":"APIs","title":"QuantumStateBase.FockState","text":"FockState([T::Type{<:Number}], n::Integer, [rep::Type]; dim::Integer)\n\nConstruct a Fock state in rep representation.\n\nArguments\n\nT: Numerical type. Default as Float64 if not assigned.\nn: Photon number of Fock state.\nrep: In which representation, default as Vector if not assigned.\ndim: Maximum photon number for truncate.\n\n\n\n\n\n","category":"method"},{"location":"apis/#QuantumStateBase.SinglePhotonState-Tuple{Any, Any}","page":"APIs","title":"QuantumStateBase.SinglePhotonState","text":"SinglePhotonState([T::Type{<:Number}], [rep::Type]; dim::Integer)\n\nConstruct a single photon state in rep representation.\n\nArguments\n\nT: Numerical type. Default as Float64 if not assigned.\nrep:In which representation, default as Vector if not assigned.\ndim: Maximum photon number for truncate.\n\n\n\n\n\n","category":"method"},{"location":"apis/#QuantumStateBase.SqueezedState-Tuple{Type{<:Complex}, Any, Any, Any}","page":"APIs","title":"QuantumStateBase.SqueezedState","text":"SqueezedState([T::Type{<:Complex}], r::Real, Œ∏::Real, [rep::Type]; dim::Integer)\n\nConstruct a squeezed state in rep representation.\n\nSqueezed state is defined if its electric field strength for some phases has a quantum uncertainty smaller than that of a coherent state.\n\nArguments\n\nT: Numerical type. Default as ComplexF64 if not assigned.\nr: The squeezing level.\nŒ∏: The squeezing phase.\nrep:In which representation, default as Vector if not assigned.\ndim: Maximum photon number for truncate.\n\nThis constructor will construct  xi rangle = hatS(xi)  0 rangle\n\n\n\n\n\n","category":"method"},{"location":"apis/#QuantumStateBase.SqueezedThermalState-Tuple{Type{<:Complex}, Any, Any, Any}","page":"APIs","title":"QuantumStateBase.SqueezedThermalState","text":"SqueezedThermalState([T::Type{<:Complex}], r::Real, Œ∏::Real, nÃÑ::Real; dim::Integer)\n\nConstruct a squeezed thermal state.\n\nSqueezed thermal state is defined if its electric field strength for some phases has a quantum uncertainty smaller than that of a coherent state.\n\nArguments\n\nT: Numeric type. Default as ComplexF64 if not assigned.\nr: Squeezing level.\nŒ∏: Squeezing phase.\nnÃÑ: Average photon number at a certain temperature.\ndim: Maximum photon number for truncate.\n\nThis constructor will construct rho = hatS(xi) rho_th hatS(xi)^T\n\n\n\n\n\n","category":"method"},{"location":"apis/#QuantumStateBase.Squeezing-Tuple{Type{<:Complex}, Real, Real}","page":"APIs","title":"QuantumStateBase.Squeezing","text":"QuantumStateBase.Squeezing(T::Type{<:Complex}, r::Real, Œ∏::Real; dim::Integer)\n\nConstruct a squeezing operator in matrix form.\n\nArguments\n\nr: Squeezing level.\nŒ∏: Squeezing phase.\n\nhatS(xi) = exp(frac12(xi^* hata^2 - xi hata^dagger 2))\n\n\n\n\n\n","category":"method"},{"location":"apis/#QuantumStateBase.ThermalState-Tuple{Type{<:Number}, Any}","page":"APIs","title":"QuantumStateBase.ThermalState","text":"ThermalState([T::Type{<:Number}], nÃÑ::Real; dim::Integer)\n\nConstruct a thermal state.\n\nThermal state is a mixed state with photon number distribution described by Bose-Einstein distribution.\n\nArguments\n\nT: Numerical type. Default as Float64 if not assigned.\nnÃÑ: Average photon number at a certain temperature.\ndim: Maximum photon number for truncate.\n\n\n\n\n\n","category":"method"},{"location":"apis/#QuantumStateBase.VacuumState-Tuple{Any, Any}","page":"APIs","title":"QuantumStateBase.VacuumState","text":"VacuumState([T::Type{<:Number}], [rep::Type]; dim::Integer)\n\nConstruct a vacuum state in rep representation.\n\nArguments\n\nT: Numerical type. Default as Float64 if not assigned.\nrep:In which representation, default as Vector if not assigned.\ndim: Maximum photon number for truncate.\n\n\n\n\n\n","category":"method"},{"location":"apis/#QuantumStateBase.annihilate-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"APIs","title":"QuantumStateBase.annihilate","text":"annihilate(s::AbstractArray{T})\n\nApply annihilation operator on a quantum state.\n\nArguments\n\ns: s can be a quantum state vector or a density matrix of a quantum state.\n\nExamples\n\njulia> state = SinglePhotonState(dim=5)\n5-element Vector{Float64}:\n 0.0\n 1.0\n 0.0\n 0.0\n 0.0\n\njulia> annihilate(state)\n5-element Vector{Float64}:\n 1.0\n 0.0\n 0.0\n 0.0\n 0.0\n\njulia> state = SinglePhotonState(Matrix, dim=5)\n5√ó5 Matrix{Float64}:\n 0.0  0.0  0.0  0.0  0.0\n 0.0  1.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0\n\njulia> annihilate(state)\n5√ó5 Matrix{Float64}:\n 1.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0\n\n\n\n\n\n","category":"method"},{"location":"apis/#QuantumStateBase.create-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"APIs","title":"QuantumStateBase.create","text":"create(s::AbstractArray{T})\n\nApply creation operator on a quantum state.\n\nArguments\n\ns: s can be a quantum state vector or a density matrix of a quantum state.\n\nExamples\n\njulia> state = VacuumState(dim=5)\n5-element Vector{Float64}:\n 1.0\n 0.0\n 0.0\n 0.0\n 0.0\n\njulia> create(state)\n5-element Vector{Float64}:\n 0.0\n 1.0\n 0.0\n 0.0\n 0.0\n\njulia> state = VacuumState(Matrix, dim=5)\n5√ó5 Matrix{Float64}:\n 1.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0\n\njulia> create(state)\n5√ó5 Matrix{Float64}:\n 0.0  0.0  0.0  0.0  0.0\n 0.0  1.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0\n\n\n\n\n\n","category":"method"},{"location":"apis/#QuantumStateBase.displace-Union{Tuple{T}, Tuple{AbstractVector{T}, Any, Any}} where T","page":"APIs","title":"QuantumStateBase.displace","text":"displace(s::AbstractArray{T}, r, Œ∏)\n\nApply displacement operator on a quantum state.\n\nArguments\n\ns: s can be a quantum state vector or a density matrix of a quantum state.\nr: Radius of displacement.\nŒ∏: Phase of displacement.\n\nExamples\n\njulia> state = VacuumState(dim=5)\n5-element Vector{Float64}:\n 1.0\n 0.0\n 0.0\n 0.0\n 0.0\n\njulia> displace(state, 2, œÄ/4)\n5-element Vector{ComplexF64}:\n   0.14864196494651452 - 5.551115123125783e-17im\n   0.15309939720606983 - 0.15309939720606955im\n 8.326672684688674e-17 - 0.5201876236174409im\n   -0.1359447277638306 - 0.13594472776383068im\n   -0.7896009204837534 - 3.0531133177191805e-16im\n\njulia> state = VacuumState(Matrix, dim=5)\n5√ó5 Matrix{Float64}:\n 1.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0\n\njulia> displace(state, 2, œÄ/4)\n5√ó5 Matrix{ComplexF64}:\n   0.0220944+0.0im              0.022757+0.022757im   4.12531e-17+0.0773217im    -0.0202071+0.0202071im    -0.117368+8.92137e-17im\n    0.022757-0.022757im        0.0468789+0.0im          0.0796404+0.0796404im  -2.42861e-17+0.0416261im    -0.120887+0.120887im\n 4.12531e-17-0.0773217im       0.0796404-0.0796404im     0.270595+0.0im           0.0707168+0.0707168im  9.30717e-17+0.410741im\n  -0.0202071-0.0202071im    -2.42861e-17-0.0416261im    0.0707168-0.0707168im     0.0369619+0.0im           0.107342+0.107342im\n   -0.117368-8.92137e-17im     -0.120887-0.120887im   9.30717e-17-0.410741im       0.107342-0.107342im       0.62347+0.0im\n\n\n\n\n\n","category":"method"},{"location":"apis/#QuantumStateBase.laguerre-Tuple{Integer, Integer}","page":"APIs","title":"QuantumStateBase.laguerre","text":"laguerre(n::Integer, Œ±::Integer)(x::Real)\n\nGeneralized Laguerre polynomials\n\nExamples\n\njulia> L = laguerre(1, 3);\n\njulia> L(5)\n-1\n\n\n\n\n\n","category":"method"},{"location":"apis/#QuantumStateBase.laguerre-Union{Tuple{T}, Tuple{Integer, Integer, T}} where T<:Real","page":"APIs","title":"QuantumStateBase.laguerre","text":"laguerre(n::Integer, Œ±::Integer, x::Real)\n\nGeneralized Laguerre polynomials\n\nExamples\n\njulia> laguerre(0, 1, 5)\n1\n\njulia> laguerre(1, 3, 5)\n-1\n\n\n\n\n\n","category":"method"},{"location":"apis/#QuantumStateBase.squeeze-Union{Tuple{T}, Tuple{AbstractVector{T}, Any, Any}} where T","page":"APIs","title":"QuantumStateBase.squeeze","text":"squeeze(s::AbstractArray{T})\n\nApply squeezing operator on a quantum state.\n\nArguments\n\ns: s can be a quantum state vector or a density matrix of a quantum state.\nr: Squeezing level.\nŒ∏: Squeezing phase.\n\nExamples\n\njulia> state = VacuumState(dim=5)\n5-element Vector{Float64}:\n 1.0\n 0.0\n 0.0\n 0.0\n 0.0\n\njulia> squeeze(state, 0.5, œÄ/4)\n5-element Vector{ComplexF64}:\n     0.9419264274916698 + 0.0im\n                    0.0 + 0.0im\n   -0.21510388914370943 + 0.21510388914370937im\n                    0.0 + 0.0im\n 3.0228557826221164e-17 - 0.1422506201859301im\n\njulia> state = VacuumState(Matrix, dim=5)\n5√ó5 Matrix{Float64}:\n 1.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0\n\njulia> squeeze(state, 0.5, œÄ/4)\n5√ó5 Matrix{ComplexF64}:\n    0.887225+0.0im       0.0+0.0im   -0.202612-0.202612im   0.0+0.0im  2.84731e-17+0.13399im\n         0.0+0.0im       0.0+0.0im         0.0+0.0im        0.0+0.0im          0.0+0.0im\n   -0.202612+0.202612im  0.0+0.0im   0.0925394+0.0im        0.0+0.0im   -0.0305987-0.0305987im\n         0.0+0.0im       0.0+0.0im         0.0+0.0im        0.0+0.0im          0.0+0.0im\n 2.84731e-17-0.13399im   0.0+0.0im  -0.0305987+0.0305987im  0.0+0.0im    0.0202352+0.0im\n\n\n\n\n\n","category":"method"},{"location":"apis/#QuantumStateBase.wigner-Union{Tuple{T}, Tuple{AbstractMatrix{T}, AbstractRange, AbstractRange}} where T","page":"APIs","title":"QuantumStateBase.wigner","text":"wigner(œÅ::AbstractMatrix{T}, x_range::AbstractRange, p_range::AbstractRange)\n\nCalculate the Wigner fuction of the quantum state in the gevin x and p range.\n\nArguments\n\nœÅ: Density matrix of a quantum state.\nx_range: First physical domain range in phase space.\np_range: Second physical domain range in phase space.\n\nExample\n\njulia> xs = -1:0.1:1; ps = -1:0.1:1;\n\njulia> wigner(VacuumState(Matrix, dim=35), xs, ps);\n\n\n\n\n\n","category":"method"},{"location":"apis/#QuantumStateBase.z-Tuple{QuantumStateBase.ComplexVec}","page":"APIs","title":"QuantumStateBase.z","text":"QuantumStateBase.z(complexvec::ComplexVec)\n\nEvaluate the complex vector.\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = QuantumStateBase","category":"page"},{"location":"#QuantumStateBase","page":"Home","title":"QuantumStateBase","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for QuantumStateBase.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The package can be installed with the Julia package manager. From the Julia REPL, type ] to enter the Pkg REPL mode and run:","category":"page"},{"location":"","page":"Home","title":"Home","text":"pkg> add QuantumStateBase","category":"page"},{"location":"#Quick-start","page":"Home","title":"Quick start","text":"","category":"section"},{"location":"#Construct-a-squeezed-thermal-state-and-plot-the-Wigner-function","page":"Home","title":"Construct a squeezed thermal state and plot the Wigner function","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"julia> using QuantumStateBase, Plots\n\njulia> state = SqueezedThermalState(Œæ(0.5, 3œÄ/2), 0.3);\n\njulia> wf = WignerFunction(-10:0.1:10, -10:0.1:10);\n\njulia> w = wf(state);\n\njulia> heatmap(w.x_range, w.p_range,  w.ùê∞_surface')","category":"page"},{"location":"","page":"Home","title":"Home","text":"<img src=\"assets/squeezed_thermal_heatmap.png\" width=\"50%\"/>","category":"page"},{"location":"#Plot-quadrature-probability-density-function-of-the-state","page":"Home","title":"Plot quadrature probability density function of the state","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"julia> Œ∏s = LinRange(0, 2œÄ, 100);\n\njulia> xs = LinRange(-10, 10, 100);\n\njulia> ps = q_pdf(state, Œ∏s, xs);\n\njulia> heatmap(Œ∏s, xs, ps')","category":"page"},{"location":"","page":"Home","title":"Home","text":"\n<img src=\"assets/squeezed_thermal_quad.png\" width=\"50%\"/>","category":"page"},{"location":"#Sample-points-from-quadrature-PDF-of-the-state","page":"Home","title":"Sample points from quadrature PDF of the state","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"julia> points = rand(state, 4096);\n\njulia> scatter(points[1, :], points[2, :])","category":"page"},{"location":"","page":"Home","title":"Home","text":"<img src=\"assets/squeezed_thermal_sampled.png\" width=\"50%\"/>","category":"page"}]
}
